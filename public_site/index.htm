<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <link
    href="https://fonts.googleapis.com/css?family=Aldrich|Arima+Madurai|Open Sans|Libre+Baskerville|Pirata+One|Poiret+One|Sancreek|Satisfy|Share+Tech+Mono|Smokum|Snowburst+One|Special+Elite"
    rel="stylesheet">

  <style>
    .state {
      fill: lightgrey;
      cursor: pointer;
    }

    .outline {
      fill: none;
      stroke: black;
      stroke-width: 1px
    }

    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }
  </style>
</head>

<body>
  <h2 style="text-align: center;">INFO 4310 Homework 2: Interactive Visualization Design</h2>
  <h4 style="text-align: center;">Eric Freitag, Longyi Zhang, Christopher Sun, Miles Rosenthal </h4>
  <div style="text-align: center;">
    <svg id="main" height=900 width=1200 style="border:1px solid black;margin-bottom: 0;"></svg>
  </div>
  <input type="number" id="inputField1" min="1913" max="2013" value="1913">
  <input type="number" id="inputField2" min="1913" max="2013" value="1946">
  <input type="number" id="inputField3" min="1913" max="2013" value="1979">
  <input type="number" id="inputField4" min="1913" max="2013" value="2013">
  <button id="submit-year">Choose Years</button>

</body>

<script>

  let input = [1913, 1946, 1979, 2013]

  // Set up main visualization and side panel
  const main = d3.select("#main")
  const mainMargin = { t: 60, r: 400, b: 20, l: 20 }
  const mainWidth = main.attr("width") - mainMargin.l - mainMargin.r
  const mainHeight = main.attr("height") - mainMargin.t - mainMargin.b
  const map = main.append("g")
    .attr("transform", `translate(${mainMargin.l},${mainMargin.t})`);
  const panel = main.append("g")
    .attr("transform", `translate(${mainMargin.l + mainWidth},${mainMargin.t})`);


  // Render visualization
  let render = async function () {
    // Load datasets
    let tempByState = await d3.csv('./processed_state_1913_2013.csv')
    tempByState = tempByState.filter(function (d) { return d.State }) // Remove empty rows generated by pre-processing script.
    
    // Round avg temp to 0.1 and convert dates to datetime objects
    const timeParser = d3.timeParse('%Y-%m-%d');
    tempByState.forEach(d => {
      d.AverageTemperature = Math.round(d.AverageTemperature * 10) / 10
      d.dt = timeParser(d.dt);
    })

    // Group entries by year, note that date does not behave well with grouping or sorting.
    let tempStateYear = {}
    for (let i = 0; i < 101; i++) {
      let year = []
      for (let j = 0; j < 51; j++) {
        year[j] = tempByState[101 * j + i]
      }
      tempStateYear[i + 1913] = year
    }

    // Find differences between input year and base year
    let input4_differences = {};
    for(let i=0; i<51; i++){
      x = tempStateYear[input4][i]["AverageTemperature"] - tempStateYear['1913'][i]["AverageTemperature"];
      input4_differences[tempStateYear[input4][i]["State"]] = x;
    }

    let us = await d3.json("./us-map.json")

    // Create US Map
    let states = topojson.feature(us, us.objects.states);
    let statesSliced = []
    let statesCode = [] // Array of state codes. Codes share the same position as their corresponding states in the TempStateYear object
    for (let i = 0; i < 51; i++) {
      statesSliced[i] = states.features[i]
      statesCode[i] = states.features[i].id
    }

    let statesMesh = topojson.mesh(us, us.objects.states);

    let tempExt = d3.extent(tempByState, d => Number(d.AverageTemperature))
    
    // Quantile scale for avg tmp
    let tempScale = d3.scaleQuantize(
      tempExt,
      ["#5f9cfa", " #a7c8fc ", " #f4f8ff ", " #ff9696 ", " #fe5959 "])

    // an alternative linear alternative scale
    let tempScaleContinuous = d3.scaleSequential(d3.interpolateViridis)
      .domain(tempExt)


    //Grid setup
    const cellWidth = Math.floor(mainWidth / 2)
    const cellHeight = Math.floor(mainHeight / 2);
    const chartMargin = 20;
    const chartWidth = cellWidth - (2 * chartMargin);
    const chartHeight = cellHeight - (2 * chartMargin);
    let projection = d3.geoAlbersUsa().fitSize([chartWidth, chartHeight], states);
    let path = d3.geoPath().projection(projection);

    function createCell(x, y, year) {
      let yearData = tempStateYear[year]
      let cell = main.append("g").attr("class", "cell")
        .attr("transform", `translate(${x + 20},${y + 20})`);

      let cellStates = cell.selectAll("path.state").data(statesSliced)
                          .join("path")
                          .attr("class", "state")
                          .attr("d", path)
                          .style("fill", d => tempScaleContinuous(yearData[statesCode.indexOf(d.id)].AverageTemperature));

      cell.append("path").datum(statesMesh)
        .attr("class", "outline")
        .attr("d", path);

      return [cell, cellStates];
    }

    let cells = [];
    let allCellStates = [];

    panel.append("line")
      .attr("x1", 0)
      .attr("x2", 0)
      .attr("y1", 0)
      .attr("y2", mainHeight)
      .attr("stroke", "#000")

    let idToState = { 23 : "Maine", 33 : "New Hampshire", 50 : "Vermont",
                      25 : "Massachusetts", 44 : "Rhode Island", 9 : "Connecticut",
                      36 : "New York", 42 : "Pennsylvania", 34 : "New Jersey",
                      10 : "Delaware", 24 : "Maryland", 51 : "Virginia",
                      54 : "West Virginia", 37 : "North Carolina", 45 : "South Carolina",
                      13 : "Georgia", 12 : "Florida", 1 : "Alabama",
                      47 : "Tennessee", 21 : "Kentucky", 39 : "Ohio",
                      26 : "Michigan", 18 : "Indiana", 28 : "Mississippi",
                      22 : "Louisiana", 5 : "Arkansas", 29 : "Missouri",
                      17 : "Illinois", 55 : "Wisconsin", 19 : "Iowa",
                      38 : "North Dakota", 46 : "South Dakota", 31 : "Nebraska",
                      20 : "Kansas", 40 : "Oklahoma", 48 : "Texas",
                      35 : "New Mexico", 8 : "Colorado", 56 : "Wyoming",
                      30 : "Montana", 16 : "Idaho", 49 : "Utah",
                      4 : "Arizona", 32 : "Nevada", 41 : "Oregon",
                      53 : "Washington", 6 : "California", 2 : "Alaska",
                      15 : "Hawaii", 27: "Minnesota"}
    
    // On hover interaction functions
    allCellStates.forEach(s1 => {
      s1.on("mouseover", function(event, d) {
        allCellStates.forEach(s2 => {
          d3.select(s2._groups[0][statesCode.indexOf(d.id)])
            .attr("stroke","black")
            .attr("stroke-width", 3);
        })

        updatePanel(idToState[d.id]);
      })

      s1.on("mouseout", function(event, d) {
        allCellStates.forEach(s2 => {
          d3.select(s2._groups[0][statesCode.indexOf(d.id)])
          .attr("stroke", "none")
          .attr("stroke-width", 0);
        })
          
        updatePanel({});
      });
    })
    

    // Update information panel based on what state was selected
    function updatePanel(state) {

    }

    function updateMap() {
      console.log('submitted')
      input[0] = document.getElementById("inputField1").value
      input[1] = document.getElementById("inputField2").value
      input[2] = document.getElementById("inputField3").value;
      input[3] = document.getElementById("inputField4").value
      console.log(input)

      for (let i = 0; i < 2; i++) {
        for (let j = 0; j < 2; j++) {
          let xPos = j * cellWidth;
          let yPos = i * cellHeight;
          let year = input[i * 2 + j]
          let [cell, cellStates] = createCell(xPos, yPos, year);
          cells.push(cell.node());
          allCellStates.push(cellStates);
        }
      }
    }
    // listens to button submit
    let btn = d3.select('button#submit-year')
      .on("click", d => updateMap());

    // draw map upon loading.
    updateMap()
  }
  render();




</script>

</html>