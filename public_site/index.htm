<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <link
    href="https://fonts.googleapis.com/css?family=Aldrich|Arima+Madurai|Open Sans|Libre+Baskerville|Pirata+One|Poiret+One|Sancreek|Satisfy|Share+Tech+Mono|Smokum|Snowburst+One|Special+Elite"
    rel="stylesheet">

  <style>
    .state {
      fill: lightgrey;
      cursor: pointer;
    }

    .outline {
      fill: none;
      stroke: black;
      stroke-width: 1px
    }

    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

    body {
      font: "Arima+Madurai";
    }

    label {
      font-size: 12pt;
    }

    p {
      font-size: 13pt;
    }

    .panel-title {
      font-size: 16pt;
      text-anchor: middle;
      font-weight: bold;
    }

    .panel-table {
      font-size: 14pt;
      text-anchor: middle;
    }
  </style>
</head>

<body>
  <h2 style="text-align: center;">INFO 4310 Homework 2: Interactive Visualization Design</h2>
  <h4 style="text-align: center;">Eric Freitag, Longyi Zhang, Christopher Sun, Miles Rosenthal </h4>
  <div style="text-align: center;">
    <p>
      This visualization displays maps of the United States with each
      state being colored, on a diverging scale, according to their average
      temperature for the map's specific year. The scale goes from blue, the coldest,
      to red, the hottest, with white as a middle ground. Users can input
      specific years for each map to see different progressions of the average
      temperature throughout those years. Users can also hover over specific states,
      which will then display a scatterplot of the average temperatures
      over time on a panel next to the main visual.
    </p>
    <svg id="main" height=750 width=1200 style="border:1px solid black;margin-bottom: 0;"></svg>
  </div>
  <input type="number" id="inputField1" min="1913" max="2013" value="1913">
  <input type="number" id="inputField2" min="1913" max="2013" value="1946">
  <input type="number" id="inputField3" min="1913" max="2013" value="1979">
  <input type="number" id="inputField4" min="1913" max="2013" value="2013">
  <button id="submit-year">Choose Years</button>
  <label for="submit-year">(Enter years from 1913 to 2013)</label>
</body>

<script>
  let input = [1913, 1946, 1979, 2013]

  // Set up main visualization and side panel
  const main = d3.select("#main")
  const mainMargin = { t: 60, r: 400, b: 20, l: 20 }
  const mainWidth = main.attr("width") - mainMargin.l - mainMargin.r
  const mainHeight = main.attr("height") - mainMargin.t - mainMargin.b
  const map = main.append("g")
    .attr("transform", `translate(${mainMargin.l},${mainMargin.t})`);
  const panel = main.append("g")
    .attr("transform", `translate(${mainMargin.l + mainWidth},${mainMargin.t})`);
  const panelWidth = mainMargin.r;
  const panelHeight = mainHeight;


  // Render visualization
  let render = async function () {
    // Load datasets
    let tempByState = await d3.csv('./processed_state_1913_2013.csv')
    tempByState = tempByState.filter(function (d) { return d.State }) // Remove empty rows generated by pre-processing script.

    // Round avg temp to 0.1 and convert dates to datetime objects
    const timeParser = d3.timeParse('%Y-%m-%d');
    tempByState.forEach(d => {
      d.AverageTemperature = Math.round(d.AverageTemperature * 10) / 10
      d.dt = timeParser(d.dt);
    })

    // Group entries by year, note that date does not behave well with grouping or sorting.
    let tempStateYear = {}
    for (let i = 0; i < 101; i++) {
      let year = []
      for (let j = 0; j < 51; j++) {
        year[j] = tempByState[101 * j + i]
      }
      tempStateYear[i + 1913] = year
    }

    // find differences between input year and base year
    let all_differences = {};
    for (let j = 0; j < 4; j++) {
      let input_differences = {};
      for (let i = 0; i < 51; i++) {
        x = tempStateYear[input[j]][i]["AverageTemperature"] - tempStateYear['1913'][i]["AverageTemperature"];
        input_differences[tempStateYear[input[j]][i]["State"]] = x;
      }
      all_differences[input[j]] = input_differences;
    };

    let us = await d3.json("./us-map.json")

    // Create US Map
    let states = topojson.feature(us, us.objects.states);
    let statesSliced = []
    let statesCode = [] // Array of state codes. Codes share the same position as their corresponding states in the TempStateYear object
    for (let i = 0; i < 51; i++) {
      statesSliced[i] = states.features[i]
      statesCode[i] = states.features[i].id
    }

    let statesMesh = topojson.mesh(us, us.objects.states);

    let tempExt = d3.extent(tempByState, d => Number(d.AverageTemperature))

    // Quantile scale for avg tmp
    // let tempScale = d3.scaleQuantize(tempExt, ["#5f9cfa", " #a7c8fc ", " #f4f8ff ", " #ff9696 ", " #fe5959 "])

    // An alternative linear alternative scale
    // let tempScale = d3.scaleSequential(d3.interpolateViridis).domain(tempExt)

    let tempScale = d3.scaleDiverging()
      .domain([tempExt[1], 12, tempExt[0]])
      .interpolator(d3.interpolateRdBu)

    // Grid setup
    const cellWidth = Math.floor(mainWidth / 2)
    const cellHeight = Math.floor(mainHeight / 2);
    const chartMargin = 20;
    const chartWidth = cellWidth - (2 * chartMargin);
    const chartHeight = cellHeight - (2 * chartMargin);
    let projection = d3.geoAlbersUsa().fitSize([chartWidth, chartHeight], states);
    let path = d3.geoPath().projection(projection);

    function createCell(x, y, year) {
      let yearData = tempStateYear[year]
      let cell = main.append("g").attr("class", "cell")
        .attr("transform", `translate(${x + 20},${y + 20})`);

      let cellStates = cell.selectAll("path.state").data(statesSliced)
        .join("path")
        .attr("class", "state")
        .attr("d", path)
        .style("fill", d => tempScale(tempStateYear[year][statesCode.indexOf(d.id)].AverageTemperature));

      cell.append("path").datum(statesMesh)
        .attr("class", "outline")
        .attr("d", path);

      return [cell, cellStates];
    }

    function updateMap() {
      console.log('submitted')
      input[0] = document.getElementById("inputField1").value;
      input[1] = document.getElementById("inputField2").value;
      input[2] = document.getElementById("inputField3").value;
      input[3] = document.getElementById("inputField4").value;

      // Find differences between input year and base year
      for (let j = 0; j < 4; j++) {
        let input_differences = {};
        for (let i = 0; i < 51; i++) {
          x = tempStateYear[input[j]][i]["AverageTemperature"] - tempStateYear['1913'][i]["AverageTemperature"];
          input_differences[tempStateYear[input[j]][i]["State"]] = x;
        }
        all_differences[input[j]] = input_differences;
      };

      let cells = [];
      let allCellStates = [];

      document.getElementById("submit-year").onclick = function () {
        main.selectAll('text').remove();
      }
      for (let i = 0; i < 2; i++) {
        for (let j = 0; j < 2; j++) {
          let xPos = j * cellWidth;
          let yPos = i * cellHeight;
          let year = input[i * 2 + j]
          let [cell, cellStates] = createCell(xPos, yPos, year);
          main.append("text")
            .attr("x", xPos + 155)
            .attr("y", yPos + 360)
            .text(year);
          cells.push(cell.node());
          allCellStates.push(cellStates);
        }
      }

      // On hover interaction functions
      allCellStates.forEach(s1 => {
        s1.on("mouseover", function (event, d) {
          allCellStates.forEach(s2 => {
            d3.select(s2._groups[0][statesCode.indexOf(d.id)])
              .attr("stroke", "black")
              .attr("stroke-width", 3);
          })

          updatePanel(d.id);
        })

        s1.on("mouseout", function (event, d) {
          allCellStates.forEach(s2 => {
            d3.select(s2._groups[0][statesCode.indexOf(d.id)])
              .attr("stroke", "none")
              .attr("stroke-width", 0);
          })

          updatePanel(-1);
        });
      })
    }

    // Draw map upon loading.
    updateMap();

    // Listens to button submit
    let btn = d3.select('button#submit-year')
      .on("click", d => updateMap())

    panel.append("line")
      .attr("x1", 0)
      .attr("x2", 0)
      .attr("y1", 0)
      .attr("y2", mainHeight)
      .attr("stroke", "#000")


    let idToState = {
      23: "Maine", 33: "New Hampshire", 50: "Vermont",
      25: "Massachusetts", 44: "Rhode Island", 9: "Connecticut",
      36: "New York", 42: "Pennsylvania", 34: "New Jersey",
      10: "Delaware", 24: "Maryland", 51: "Virginia",
      54: "West Virginia", 37: "North Carolina", 45: "South Carolina",
      13: "Georgia", 12: "Florida", 1: "Alabama",
      47: "Tennessee", 21: "Kentucky", 39: "Ohio",
      26: "Michigan", 18: "Indiana", 28: "Mississippi",
      22: "Louisiana", 5: "Arkansas", 29: "Missouri",
      17: "Illinois", 55: "Wisconsin", 19: "Iowa",
      38: "North Dakota", 46: "South Dakota", 31: "Nebraska",
      20: "Kansas", 40: "Oklahoma", 48: "Texas",
      35: "New Mexico", 8: "Colorado", 56: "Wyoming",
      30: "Montana", 16: "Idaho", 49: "Utah",
      4: "Arizona", 32: "Nevada", 41: "Oregon",
      53: "Washington", 6: "California", 2: "Alaska",
      15: "Hawaii", 27: "Minnesota"
    }

    // Update information panel based on what state was selected
    function updatePanel(id) {
      if (id == -1){
        panel.selectAll("*").remove();
        panel.append("line")
            .attr("x1", 0)
            .attr("x2", 0)
            .attr("y1", 0)
            .attr("y2", mainHeight)
            .attr("stroke", "#000");
      }
      else{
        const yearToTemp = [];
        for (let j = 0; j < 4; j++) {
          yearToTemp[j] = [input[j], tempStateYear[input[j]][statesCode.indexOf(id)]["AverageTemperature"]]
        };

        const panelInformation = panel.append("g")
          .attr("transform", `translate(${panelWidth/2},${0})`);
        
        panelInformation.append("text")
                        .attr("class","panel-title")
                        .text(idToState[id]);
        panelInformation.append("text")
                          .attr("class","panel-table")
                          .attr("x", -160)
                          .attr("y", 50)
                          .attr("font-weight", "bold")
                          .text("Year");
        panelInformation.append("text")
                        .attr("class","panel-table")
                        .attr("x", -160)
                        .attr("y", 100)
                        .text(yearToTemp[0][0]);
        panelInformation.append("text")
                        .attr("class","panel-table")
                        .attr("x", -160)
                        .attr("y", 150)
                        .text(yearToTemp[1][0]);
        let panelTable3Year = panelInformation.append("text")
                                          .attr("class","panel-table")
                                          .attr("x", -160)
                                          .attr("y", 200)
                                          .text(yearToTemp[2][0]);
        let panelTable4Year = panelInformation.append("text")
                                          .attr("class","panel-table")
                                          .attr("x", -160)
                                          .attr("y", 250)
                                          .text(yearToTemp[3][0]);
        let panelTableHeaderTemp = panelInformation.append("text")
                                          .attr("class","panel-table")
                                          .attr("x", -50)
                                          .attr("y", 50)
                                          .attr("font-weight", "bold")
                                          .text("Average Temp (C)");
        let panelTable1Temp = panelInformation.append("text")
                                          .attr("class","panel-table")
                                          .attr("x", -50)
                                          .attr("y", 100)
                                          .text(yearToTemp[0][1]);
        let panelTable2Temp = panelInformation.append("text")
                                          .attr("class","panel-table")
                                          .attr("x", -50)
                                          .attr("y", 150)
                                          .text(yearToTemp[1][1]);
        let panelTable3Temp = panelInformation.append("text")
                                          .attr("class","panel-table")
                                          .attr("x", -50)
                                          .attr("y", 200)
                                          .text(yearToTemp[2][1]);
        let panelTable4Temp = panelInformation.append("text")
                                          .attr("class","panel-table")
                                          .attr("x", -50)
                                          .attr("y", 250)
                                          .text(yearToTemp[3][1]);
        panelInformation.append("text")
                        .attr("class","panel-table")
                        .attr("x", 115)
                        .attr("y", 50)
                        .attr("font-weight", "bold")
                        .text("Change in Temp (C)");
        panelInformation.append("text")
                        .attr("class","panel-table")
                        .attr("x", 115)
                        .attr("y", 100)
                        .text((yearToTemp[0][1] - yearToTemp[0][1]).toFixed(1));
        panelInformation.append("text")
                        .attr("class","panel-table")
                        .attr("x", 115)
                        .attr("y", 150)
                        .text((yearToTemp[1][1] - yearToTemp[0][1]).toFixed(1));
        panelInformation.append("text")
                        .attr("class","panel-table")
                        .attr("x", 115)
                        .attr("y", 200)
                        .text((yearToTemp[2][1] - yearToTemp[0][1]).toFixed(1));
        panelInformation.append("text")
                        .attr("class","panel-table")
                        .attr("x", 115)
                        .attr("y", 250)
                        .text((yearToTemp[3][1] - yearToTemp[0][1]).toFixed(1));

        let panelChart = panel.append("g")
                                .attr("class", "panel-chart")
                                .attr("transform", `translate(${50},${300})`);

        const tExtent = d3.extent(yearToTemp, d => d[1])
        const tScale = d3.scaleLinear().domain(tExtent).range([300, 0])

        const yExtent = d3.extent(yearToTemp, d => d[0])
        const yScale = d3.scaleLinear().domain(yExtent).range([0, 300])

        let leftAxis = d3.axisLeft(tScale)
        let leftGridlines = d3.axisLeft(tScale)
                              .tickFormat("")
                              .tickSize(-310);
        
        panelChart.append("g").attr("class", "y axis")
                                .attr("transform", `translate(${-10},${0})`)
                                .call(leftAxis);

        panelChart.append("g").attr("class", "y gridlines")
                                .attr("transform", `translate(${-10},${0})`)
                                .call(leftGridlines);
        
        let bottomAxis = d3.axisBottom(yScale).tickFormat(d3.format("~f"))
        let bottomGridlines = d3.axisBottom(yScale)
                              .tickFormat("")
                              .tickSize(-310);

        panelChart.append("g").attr("class", "x axis")
                                .attr("transform", `translate(${0},${310})`)
                                .call(bottomAxis);

        panelChart.append("g").attr("class", "x gridlines")
                                .attr("transform", `translate(${0},${310})`)
                                .call(bottomGridlines);
        
        panelChart.selectAll("circle")
                  .data(yearToTemp)
                  .join("circle")
                  .attr("cx", d => yScale(d[0]))
                  .attr("cy", d => tScale(d[1]))
                  .attr("r", 3)
                  .attr("fill", "red");  
      }
    }
  }
  render();

</script>

</html>